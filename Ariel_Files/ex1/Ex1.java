import java.util.Arrays;
import java.util.Scanner;
/**
 * Introduction to Computer Science, Ariel University, Ex1 (manual Example + a Template for your solution)
 * See: https://docs.google.com/document/d/1C1BZmi_Qv6oRrL4T5oN9N2bBMFOHPzSI/edit?usp=sharing&ouid=113711744349547563645&rtpof=true&sd=true

 * Ex1 Bulls & Cows - Automatic solution.
 * First & Last name: Ariel Ya'acobi
 * ID: 318727187
 * ** GENERAL README **
 * In this Java class, you'll find solutions for playing the game 'Bulls and Cows' in both manual and automated modes.
 * The game involves guessing a hidden code based on a feedback provided after each guess.
 * Feedback is given in terms of 'Bulls' for correct digits in their exact positions.
 * Additionally, 'Cows' for correct digits in different positions.
 * The challenge is to uncover the secret code with the fewest possible guesses, requiring strategic thinking.

 * **** General Solution (algorithm) ****
 * Firstly, The boolean array "possibleNumbers" is set to TRUE for all possible numbers initially.
 * The array has a length equal to the maximum possible numbers between 0 and 10 ** number of digits.
 * the method "PossibleNumbersInitialize" is responsible for initializing the boolean array possibleNumbers.
 * which represents the pool of potential candidate numbers for the secret code.
 * "autoEx1Game" method:
 * The loop continues until the game indicates it's not running(it's obtained through a methods of the BP_Server class)
 * Which implying that the secret code has not been guessed.
 * Within each iteration:
 * A guess is generated by selecting the next available number still marked as TRUE in the boolean array.
 * Using the possibleNumbers array to select the next valid guess for the secret code.
 * This guess is converted into an array of its digits - by the "toArray" function given to us.
 * This digit array represents the current guess, which is submitted to the game server using the "game.play" method.
 * The possibleNumbers array is updated based on the received Bulls and Cows count.
 * "updateNumbers" method:
 * This method compares the Bulls and Cows count of the current guess with each number in the possibleNumbers array.
 * If a number would produce a different count, it is marked as false, indicating that it cannot be the secret code.
 * "bull_Cows_Calculate" method:
 * This method calculates the number of Bulls and Cows for a guess based on the feedback received from the BP_Server.
 * It takes two arrays as input: guess, which is the current guess, and code, which represents the actual secret code.
 * The method iterates over the elements of the guess array and compares them with the elements in the code array.
 * If a digit in the guess array matches the digit in the same position in the code array, it increments the Bulls count.
 * If a digit matches a digit in the code array but is in a different position, it increments the Cows count.
 * Lastly, the method returns an array containing all the Bull and Cows for a given guess.



 * **** Results ****
 * Make sure to state the average required guesses
 * for 2,3,4,5,6 digit code:
 * Average required guesses 2: 6.86
 * Average required guesses 3: 7.88
 * Average required guesses 4: 8.4
 * Average required guesses 5: 8.85
 * Average required guesses 6: 9.24
 */

public class Ex1 {
    public static final String Title = "Ex1: manual & auto Bulls & Cows game";
    public static int rounds = 0;
    public static int numOfDigits = 6;

    public static void main(String[] args) {
        BP_Server game = new BP_Server();
        long myID = 318727187L;
        game.startGame(myID, numOfDigits);
        System.out.println(Title + " with code of " + numOfDigits + " digits");
        //manualEx1Game(game); // the manual algorithm
        autoEx1Game(game); //the automatic algorithm
    }
    public static void manualEx1Game(BP_Server game) {
        Scanner sc = new Scanner(System.in); //create input scanner
        int ind=1;      // Index of the guess
        int numOfDigits = game.getNumOfDigits();
        double max = Math.pow(10,numOfDigits);
        while(game.isRunning()) {           // While the game is running (the code has not been found yet)
            System.out.print(ind+") enter a guess: ");
            int g = sc.nextInt();
            if(g>=0 && g<max) {
                int[] guess = toArray(g, numOfDigits); // int to digit array
                int[] res = game.play(guess); // Playing a round and getting the B,P
                if (game.isRunning()) {     // While the game is still running
                    System.out.println(ind + ") B: " + res[0] + ",  P: " + res[1]); // Prints the Bulls [0], and the Cows [1]
                    ind += 1;               // Increasing the index of guess
                }
            }
            else {
                System.out.println("ERR: wrong input, try again");
            }
        }
        System.out.println(game.getStatus());
    }
    /**
     * Simple parsing function that gets an int and returns an array of digits
     * @param a - a natural number (as a guess)
     * @param size  - number of digits (to handle the 00 case).
     * @return an array of digits
     */
    private static int[] toArray(int a, int size) {
        int[] c = new int[size];
        for (int j = 0; j < c.length; j += 1) {
            c[j] = a % 10;
            a = a / 10;
        }
        return c;
    }
    /** -autoEx1Game-
     * The autoEx1Game method automates the process of playing the Bulls and Cows game by continuously making guesses.
     * Playing rounds and updating the list of possible numbers until the secret code is correctly guessed or game ends.
     * @param game - an object from BP_Server, used to start the game.
     */

    public static void autoEx1Game(BP_Server game) {
        boolean[] possibleNumbers = PossibleNumbersInitialize(); // Initializes the array(all possible numbers)
        int guess = 0; // Initializes the guess variable(current).
        while (game.isRunning()) { // Continues until the game is no longer running - information from BP_server.
            for (int i = 0; i < possibleNumbers.length; i++) { // Iterates through each possible number.
                if (possibleNumbers[i]) { //  Checks if the number is True
                    guess = i; // Sets the current guess to the valid candidate.
                    break; // Exits the loop once a valid candidate is found.
                }
            }
            rounds++;
            int[] guessArray = toArray(guess, numOfDigits); // Converts the guess into an array of its digits.

            int[] result = game.play(guessArray); // Plays the current guess from the server and returning the result.
            int bulls = result[0]; // Stores the number of bulls in result.

            if (bulls == numOfDigits) { // Checks if all digits are correct(guess correctly).
                break; // Exits the loop if all digits are correct.
            }
            updateNumbers(possibleNumbers, guessArray, result); // Updates the array of possible numbers.
        }
    }

    /** -PossibleNumbersInitialize-
     * Initializes the boolean array "possibleNumbers" representing possible numbers.
     * Creates the array with a length of maximum possible numbers between 0 and 10 ** number of digits.
     * Fills the array with true values, indicating all numbers are initially considered as candidates.
     * @return the initialized array "possibleNumbers".
     */
    private static boolean[] PossibleNumbersInitialize() {
        boolean[] possibleNumbers = new boolean[(int) Math.pow(10, numOfDigits)]; // explained - line 137.
        Arrays.fill(possibleNumbers, true); // explained - line 139.
        return possibleNumbers; // Returns the initialized array.
    }

    /** -updateNumbers-
     * Update the array of possible numbers based on the result of the last guess.
     * Doing it by eliminating numbers that are no longer valid candidates.
     * @param possibleNumbers - an array that contains all the possible numbers(between 0 and 10 ** number)
     * @param guess - an array that contain a guess, created by toArray method.
     * @param result - an array that contains a result, given by the server.
     */

    private static void updateNumbers(boolean[] possibleNumbers, int[] guess, int[] result) {
        for (int i = 0; i < possibleNumbers.length; i++) { // Iterates through each possible number.
            if (possibleNumbers[i]) { // Checks if the number is still a valid candidate.
                int[] guessArray = toArray(i, numOfDigits); // Possible number is converted to an array of its digits.
                int[] copyResult = bull_Cows_Calculate(guessArray, guess); // Calculates the Bulls and Cows
                // for possible number, using bull_Cows_Calculate method.

                if (!Arrays.equals(copyResult, result)) { // Checking is Bulls&Cows count matches the result of the last guess.
                    possibleNumbers[i] = false; // Number = False, it is no longer a valid candidate.
                }
            }
        }
    }
    /** -bull_Cows_Calculate-
     * Function to calculate Bulls and Cows for a guess.
     * @param guess - array contains the digits guessed by the player.
     * @param code - array represents the secret code that the player is trying to guess.
     * @return an integer array containing two elements: the number of bulls and the number of cows.
     */

    private static int[] bull_Cows_Calculate(int[] guess, int[] code) {
        int bulls = 0; // Counter of Bulls - Initialized.
        int cows = 0; //  Counter of Cows - Initialized.

        for (int i = 0; i < guess.length; i++) { // Iterates through each digit in the guess.
            if (guess[i] == code[i]) { // Checks if the digit is in the correct position of the code.
                bulls++; // Increasing the bulls counter.
            } else { // If the digit is not in the correct position
                for (int j = 0; j < code.length; j++) { // Iterates through each digit in the secret code.
                    if (guess[i] == code[j]) { // Checks if the digit is in the code but in different position.
                        cows++; // // Increasing the Cows counter.
                        break; // Exits the loop when matching digit is found.
                    }
                }
            }
        }
        int[] result = new int[2];
        result[0] = bulls;
        result[1] = cows;
        return result;
        // Returning an array containing the counts of Bulls and Cows(initializing, placing each counter and returning)
    }
}
